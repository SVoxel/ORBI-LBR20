#!/bin/sh
# udhcpc script edited by Tim Riker <Tim@Rikers.org>

CONFIG="/bin/config"
ECHO="/bin/echo"
IFCONFIG="/sbin/ifconfig"
ROUTE="/sbin/route"

[ -n "$broadcast" ] && BROADCAST="broadcast $broadcast"
[ -n "$subnet" ] && NETMASK="netmask $subnet"

AP_DNS_ASSIGN=0
if [ "$($CONFIG get ap_ether_dns_assign)" = "0" ]; then
	AP_DNS_ASSIGN=1
fi

if [ "$AP_DNS_ASSIGN" = "1" ]; then
	RESOLV_CONF="/tmp/dhcpc_resolv.conf"
else
	RESOLV_CONF="/tmp/resolv.conf"
fi

case "$1" in
	renew | bound )
		$ECHO "configure ip address got from DHCP Server ..."
		local pid=`ps | grep zcip | grep -v grep |awk '{print  $1}'`
		if [ "x$pid" != "x" ]; then
			/bin/kill -9 $pid
		fi
		local ori_ip=$($IFCONFIG $interface | grep 'inet addr' | cut -f2 -d':' | cut -f1 -d' ')

		if [ "${ip%% *}" != "$ori_ip" ]; then
            wl2g_BACKHAUL_AP=`/bin/config get wl2g_BACKHAUL_AP`
            if [ "x$wl2g_BACKHAUL_AP" != "x" ]; then
                echo "=====before lan bridge down,should down backhaul ap $wl2g_BACKHAUL_AP first=======" > /dev/console
                ifconfig $wl2g_BACKHAUL_AP down
            fi
            /etc/init.d/hyfi-bridging stop
			$IFCONFIG $interface down
			$IFCONFIG $interface $ip $BROADCAST $NETMASK 
			$IFCONFIG $interface up
            sleep 5
            /etc/init.d/hyfi-bridging start
            if [ "x$wl2g_BACKHAUL_AP" != "x" ]; then
                echo "=====bridge up,should up backhaul ap $wl2g_BACKHAUL_AP first=======" > /dev/console
                ifconfig $wl2g_BACKHAUL_AP up
            fi
		fi
		$CONFIG set ap_dhcp_ipaddr=$ip
		$CONFIG set ap_dhcp_netmask=$subnet

		wlan lanrestrict on $ip $subnet
		if [ -n "$router" ]; then
			$ECHO "deleting routers" >/dev/console
			while $ROUTE del default gw 0.0.0.0 dev $interface >&- 2>&-; do
				:
			done

			for i in $router ; do
				$ECHO "adding router $i"
				$ROUTE add default gw $i dev $interface
			done
			$CONFIG set ap_dhcp_gateway=$router
		fi

		$ECHO -n > $RESOLV_CONF
		[ -n "$domain" ] && $ECHO search $domain >> $RESOLV_CONF
		for i in $dns ; do
			$ECHO adding dns $i
			$ECHO nameserver $i >> $RESOLV_CONF
		done

		[ -n "$lease" ] && $CONFIG set dhcpc_lease_time=$lease
		[ -n "$serverid" ] && $CONFIG set ap_dhcp_server=$serverid
		$CONFIG set dhcpc_lease_obtain="$(cat /proc/uptime | awk -F. '{print $1}')"

	    if [ "${ip%% *}" != "$ori_ip" ]; then
			# restart DLNA if IP changes
			/sbin/cmddlna ip_restart

			# restart samba if IP changes
			/usr/bin/killall smbd
			/usr/sbin/update_smb
		fi

		# restart net-wall to update the br0 address in the rule.
		/usr/sbin/net-wall restart

		# restart miniupnpd to update the br0 address in ap modo, bridge mode and extender mode.
		local opmode=$($CONFIG get i_opmode)
		if [ "$opmode" = "apmode" -o "$opmode" = "brmode" -o "$opmode" = "extmode" ]; then
			/etc/init.d/upnp restart
		fi
		/etc/init.d/hyd restart
		if [ "$($CONFIG get have_forceshield)" = "1" ]; then
			if [ "${ip%% *}" != "$ori_ip" ]; then
				cd /media/nand
				./dap_port_init.sh
				./dap_port_reinit.sh
				./dap service restart
			fi
		fi
		;;
	runzcip )
		$ECHO "configure auto-ip address ..."
		if [ ! -f /usr/share/zcip/zcip.script ]; then
			$ECHO "NO SCRIPT RUNNING FOR ZCIP!!" >/dev/console
			exit 1
		fi

		local ori_ip=$($IFCONFIG $interface | grep 'inet addr' | cut -f2 -d':' | cut -f1 -d' ')
		if [ "${ori_ip%.*.*}" = "169.254" ]; then
			require_ip="-r $ori_ip"
		fi

		$ECHO "Running zcip $require_ip for $interface" >/dev/console
		/sbin/zcip -f -q $require_ip $interface /usr/share/zcip/zcip.script &
		;;
esac
