#!/bin/sh

FORCE_CREATE_wlg_VAP=${FORCE_CREATE_wlg_VAP:="on"}
FORCE_CREATE_wla_VAP=${FORCE_CREATE_wla_VAP:="on"}
FORCE_CREATE_wla2_VAP=${FORCE_CREATE_wla2_VAP:="on"}
FORCE_CREATE_wlg_guest_VAP=${FORCE_CREATE_wlg_guest_VAP:="on"}
FORCE_CREATE_wla_guest_VAP=${FORCE_CREATE_wla_guest_VAP:="on"}
FORCE_CREATE_wla2_guest_VAP=${FORCE_CREATE_wla2_guest_VAP:="on"}
FORCE_CREATE_wlg_byod_VAP=${FORCE_CREATE_wlg_byod_VAP:="on"}
FORCE_CREATE_wla_byod_VAP=${FORCE_CREATE_wla_byod_VAP:="on"}
FORCE_CREATE_wla2_byod_VAP=${FORCE_CREATE_wla2_byod_VAP:="on"}
FORCE_CREATE_wlg_arlo_VAP=${FORCE_CREATE_wlg_arlo_VAP:="on"}

export DNI_CONFIG=1

onoff_0="off"
onoff_1="on"
onoff_="off"

onoff_no_default_0="off"
onoff_no_default_1="on"

onoff_inv_0="on"
onoff_inv_1="off"
onoff_inv_="off"

onoff_inv_no_default_0="on"
onoff_inv_no_default_1="off"

sectype_1="off"
sectype_2="wep"
sectype_3="psk"
sectype_4="psk2"
sectype_5="mixed-psk"
sectype_6="wpa"

wep_auth_type_0="open"
wep_auth_type_1="shared"
wep_auth_type_2="auto"

preamble_0="auto"
preamble_1="long"
preamble_2="short"

COUNTRY_CODE_PATH=/etc/ath/country_code_mapping_table.txt

Orbi_type=`cat /tmp/orbi_type`
if [ "$Orbi_type" = "Satellite" ]; then
    FORCE_CREATE_wla_guest_VAP="off"
fi

[ -f /etc/ath/wifi.conf ] && . /etc/ath/wifi.conf
if [ "$wla_exist" = "on" ]; then
    country_code_0="ZA 710"              # Africa
    country_code_1="TH 764"              # Asia Thailand
    country_code_2="AU 5000"             # Australi *36
    country_code_3="CA 5001"             # Canada *124
    country_code_4="DE 276"              # Europe Germany
    country_code_5="IL 376"              # Israel
    country_code_6="JP 4015"             # Japan *392
    country_code_7="KR 412"              # Korea *410
    country_code_8="MX 484"              # Mexico
    country_code_9="BR 76"               # South America Brazil
    country_code_10="US 843"             # United States
    country_code_11="CN 156"             # China
    country_code_12="IN 356"             # India
    country_code_13="MY 458"             # Malaysia
    country_code_14="DZ 12"              # Middle East (Algeria/Syria/Yemen), use Algeria
#    country_code_15=364             # Middle East (Iran/Lebanon/Qatar), use Iran *Qatar QA 634 *Lebanon LB 422
    country_code_16="TR 792"             # Middle East (Turkey/Egypt/Tunisia/Kuwait), use Turkey
    country_code_17="SA 682"             # Middle East (Saudi Arabia)
    country_code_18="AE 784"             # Middle East (United Arab Emirates)
    country_code_19="RU 643"             # Russia
    country_code_20="SG 702"             # Singapore
    country_code_21="TW 158"             # Taiwan
else

    country_code_0="ZA 710"              # Africa
    country_code_1="TH 764"              # Asia Thailand
    country_code_2="AU 5000"             # Australi *36
    country_code_4="DE 276"              # Europe Germany
    country_code_5="IL 376"              # Israel
    country_code_6="JP 4015"             # Japan *392
    country_code_7="KR 412"              # Korea *410
    country_code_8="MX 484"              # Mexico
    country_code_9="BR 76"               # South America Brazil
    country_code_10="US 843"             # United States
    country_code_19="RU 643"             # Russia
    country_code_22="IL 376"             # Middle East, use Israel instead
fi

wifi_ifname_prefix=ath
wifi0_vap_cnt=0
wifi1_vap_cnt=0
wifi2_vap_cnt=0
all_vap_cnt=0
get_ifname_section() {
    radio=$3
    radio_id=`echo $radio | tr -d wifi`
    eval vap_cnt=\$${radio}_vap_cnt

    if [ $vap_cnt -eq 0 ]; then
        eval export -- "${1}=${wifi_ifname_prefix}${radio_id}"
    else
        eval export -- "${1}=${wifi_ifname_prefix}${radio_id}${vap_cnt}"
    fi
    eval export -- "${2}=@wifi-iface[${all_vap_cnt}]"
    all_vap_cnt=$(( $all_vap_cnt + 1 ))
    eval ${radio}_vap_cnt=$(( $vap_cnt + 1 ))
}

wps_status_5="configured"
wps_status_1="unconfigured"

wds_role_0="repeater"
wds_role_1="rootap"

tpscale_100=0
tpscale_75=1
tpscale_50=2
tpscale_25=3
tpscale_min=4

operation_mode_="normal_ap"
operation_mode_0="none"
operation_mode_1="normal_ap"
operation_mode_2="ex_sta"           # exterder station
operation_mode_3="normal_ap+ex_sta" # repeater
operation_mode_4="backhaul_ap"      # backhaul is running with WDS mode.
operation_mode_5="backhaul_sta"
operation_mode_6="backhaul_ap+backhaul_sta"
operation_mode_7="normal_ap+backhaul_sta"
operation_mode_8="normal_ap+backhaul_ap+backhaul_sta"
operation_mode_9="normal_ap+backhaul_ap"
operation_mode_10="qwrap_ap+qwrap_sta"

dniconfig()
{
    /bin/config $@
}

#input:  $1 - country code (string)
#input:  $2 - alternative country code (integer)
#output: $3 - finally use country code (integer)
generate_country_code(){
    string_type_contry_code=$1
    alternative_contry_code=$2
    # detect country code file is exist or not
    if [ -f $COUNTRY_CODE_PATH ];then
        vendor_country_code=$(eval awk '/$string_type_contry_code/{print\$2}' $COUNTRY_CODE_PATH)
        if [ -z "$vendor_country_code" ];then
            eval "$3=$alternative_contry_code"
        else
            eval "$3=$vendor_country_code"
        fi
    else
        eval "$3=$alternative_contry_code"
    fi
}

if [ -n "$DNI_CONFIG" ]; then
    eval atf_mode=`dniconfig get atf_enable`
    eval wlg_atf_percentage=`dniconfig get wlg_atf_percentage`
    eval wlg_byod_atf_percentage=`dniconfig get wlg2_atf_percentage`
    eval wla_atf_percentage=`dniconfig get wla_atf_percentage`
    eval wla_byod_atf_percentage=`dniconfig get wla2_atf_percentage`
    eval wlg_guest_atf_percentage=`dniconfig get wlg1_atf_percentage`
    eval wla_guest_atf_percentage=`dniconfig get wla1_atf_percentage`
    eval wlg_if_onoff=\$onoff_`dniconfig get endis_wl_radio`
    eval wla_if_onoff=\$onoff_`dniconfig get endis_wla_radio`
    eval wla2_if_onoff=\$onoff_`dniconfig get endis_wla_2nd_radio`
    eval wlg_guest_if_onoff=\$onoff_`dniconfig get wlg1_endis_guestNet`
    eval wla_guest_if_onoff=\$onoff_`dniconfig get wla1_endis_guestNet`
    eval wla2_guest_if_onoff=\$onoff_`dniconfig get wla1_2nd_endis_guestNet`
    eval wlg_byod_if_onoff=\$onoff_`dniconfig get wlg2_endis_byodNet`
    eval wla_byod_if_onoff=\$onoff_`dniconfig get wla2_endis_byodNet`
    eval wlg_arlo_if_onoff=\$onoff_`dniconfig get wlg_arlo_endis_arloNet`
    eval wlg_setup_if_onoff=\$onoff_`dniconfig get wlg_setup_endis_setupNet`
    eval wla_setup_if_onoff=\$onoff_`dniconfig get wla_setup_endis_setupNet`
    eval wla2_setup_if_onoff=\$onoff_`dniconfig get wla2_setup_endis_setupNet`

    [ "x`/bin/config get enable_arlo_function`" != "x1" ] && FORCE_CREATE_wlg_arlo_VAP=$wlg_arlo_if_onoff

    eval wl_hw_btn_state=`dniconfig get wl_hw_btn_state`
    [ -z "$wl_hw_btn_state" ] && {
        wl_hw_btn_state=on
        dniconfig set wl_hw_btn_state="on"
    }
    if [ "$wl_hw_btn_state" = "off" ]; then
        wlg_if_onoff="off"
        wla_if_onoff="off"
    fi
    # Put these after btn check.
    if [ "$wlg_if_onoff" = "off" ]; then
        wlg_guest_if_onoff="off"
        wlg_arlo_if_onoff="off"
        wlg_setup_if_onoff="off"
    fi
    if [ "$wla_if_onoff" = "off" ]; then
        wla_guest_if_onoff="off"
        wla_setup_if_onoff="off"
    fi
    if [ "$wla2_if_onoff" = "off" ]; then
        wla2_guest_if_onoff="off"
        wla2_setup_if_onoff="off"
    fi

    if [ "$wlg_if_onoff" = "off" ]; then
        wlg_byod_if_onoff="off"
    fi
    if [ "$wla_if_onoff" = "off" ]; then
        wla_byod_if_onoff="off"
    fi

    # TODO: the concept of bridge mode should have overlay to operation_mode,
    # so, need to check this afterward.
    eval wl_cb_if_onoff=\$onoff_`dniconfig get bridge_mode`
    wl_cb_mode=`dniconfig get bridge_band_choose`
    if [ "$wl_cb_if_onoff" = "on" -a "$wl_cb_mode" = "2.4g" ]; then
        wla_if_onoff="off"
        wla2_if_onoff="off"
        wlg_guest_if_onoff="off"
        wlg_arlo_if_onoff="off"
        FORCE_CREATE_wla_VAP="off"
        FORCE_CREATE_wlg_guest_VAP="off"
        FORCE_CREATE_wla_guest_VAP="off"
        FORCE_CREATE_wla2_guest_VAP="off"
        FORCE_CREATE_wlg_arlo_VAP="off"
    elif [ "$wl_cb_if_onoff" = "on" -a "$wl_cb_mode" = "5g" ]; then
        wlg_if_onoff="off"
        wla_guest_if_onoff="off"
        wla2_guest_if_onoff="off"
        FORCE_CREATE_wlg_VAP="off"
        FORCE_CREATE_wlg_guest_VAP="off"
        FORCE_CREATE_wla_guest_VAP="off"
        FORCE_CREATE_wla2_guest_VAP="off"
        FORCE_CREATE_wlg_arlo_VAP="off"
    fi

    primaryradio=`dniconfig get primaryradio`
    lan_ipaddr=`dniconfig get lan_ipaddr`
    lan_ifname=`dniconfig get lan_ifname`

    mac_2g=`dniconfig get mac_addr_2g`
    mac_5g=`dniconfig get mac_addr_5g`
    mac_2nd_5g=`dniconfig get mac_addr_2nd_5g`

    hostapd_debug_level=`dniconfig get hostapd_debug_level`
    wpa_supplicant_debug_level=`dniconfig get wpa_supplicant_debug_level`

    [ -f "/tmp/ap_pin_failure_num_file" ] || {
        dniconfig set wps_lock_down=0
    }
    wsc_lock_down=`dniconfig get wps_lock_down`
    wsc_pin_attack_check=`dniconfig get wps_pin_attack_check`
    wsc_pin_attack_num=`dniconfig get wps_pin_attack_num`
    [ -f /tmp/ap_pin_failure_num_file  ] && failure_num=`cat /tmp/ap_pin_failure_num_file 2>/dev/null` || failure_num=0
    if [ "$wsc_pin_attack_check" = "1" -a  "$failure_num" -ge "$wsc_pin_attack_num" ]; then
        echo 0 > /tmp/ap_pin_failure_num_file
    fi

    wps_config_method=`dniconfig get wps_config_method`

    wlg_ap_operation_type="none"
    wlg_sta_operation_type="none"
    wlg_ap_bh_operation_type="none"

    wla_ap_operation_type="none"
    wla_sta_operation_type="none"
    wla_ap_bh_operation_type="none"

    wla2_ap_operation_type="none"
    wla2_sta_operation_type="none"
    wla2_ap_bh_operation_type="none"

    if [ "$wlg_exist" = "on" ]; then
        eval wlg_operation_mode=\$operation_mode_`config get wlg_operation_mode`
        for op_mode in `echo $wlg_operation_mode | sed -e 's/+/ /g'`; do
            case "$op_mode" in
                ex_sta|backhaul_sta|qwrap_sta)
                    wlg_sta_operation_type=$op_mode
                    ;;
                normal_ap|qwrap_ap)
                    wlg_ap_operation_type=$op_mode
                    ;;
                backhaul_ap)
                    wlg_ap_bh_operation_type=$op_mode
                    ;;
            esac
        done
    fi

    # ================================= 2.4G START ================================
        # Read 2.4G radio dependent settings.
        if [ "$wlg_ap_operation_type" != "none" -o "$wlg_ap_bh_operation_type" != "none" -o "$wlg_sta_operation_type" != "none" ]; then
            wlg_channel=`dniconfig get wl_hidden_channel`
            [ "$wlg_channel" = "0" ] && {
                if [ "$wlg_sta_operation_type" != "none" ]; then
                    wlg_channel="1"
                else
                    wlg_channel="auto"
                fi
            }
            wlg_chmode=`dniconfig get wl_simple_mode`
            wlg_hwmode=`dniconfig get wl_hwmode`
            wlg_htmode=`dniconfig get wl_htmode`
            wlg_cca_threshold=`dniconfig get wl_cca_threshold`
            if [ -z "$wlg_hwmode" -a -z "$wlg_htmode" ]; then
                case "${wlg_chmode}" in
                    1)
                        wlg_hwmode=11bg;
                        ;;
                    2)
                        wlg_hwmode=11ng;
                        wlg_htmode=HT20;
                        ;;
                    3)
                        wlg_hwmode=11ng;
                        wlg_htmode=HT40+;
                        ;;
                    4)
                        wlg_hwmode=11b;
                        ;;
                    5)
                        wlg_hwmode=11ng;
                        wlg_htmode=HT40-;
                        ;;
                    6)
                        wlg_hwmode=11ng;
                        wlg_htmode=HT40;
                        ;;
                    *)
                        wlg_hwmode=11ng;
                        wlg_htmode=HT20;
                        ;;
                esac
            fi
        fi
        wlg_obss_rssi_th=`dniconfig get wlg_obss_rssi_th`
        wlg_obss_rx_rssi_th=`dniconfig get wlg_obss_rx_rssi_th`
        [ -z "$wlg_obss_rssi_th" ] && wlg_obss_rssi_th=25
        [ -z "$wlg_obss_rx_rssi_th" ] && wlg_obss_rx_rssi_th=20
        wlg_keepalive=`dniconfig get wl_keepalive`
        wlg_sta_dfs_en=`dniconfig get wlg_sta_dfs_en`
        eval wlg_bf_onoff=\$onoff_no_default_`dniconfig get wlg_bf`
        eval wlg_implicit_bf_onoff=\$onoff_`dniconfig get wlg_implicit_bf`
        eval wlg_mu_mimo_onoff=\$onoff_`dniconfig get wlg_mu_mimo`

        wla_enhance_dfs_mode=`dniconfig get wla_enhance_dfs`
        case "${wla_enhance_dfs_mode}" in
            0)
                eval wla_enhance_dfs=0x00
                ;;
            1)
                eval wla_enhance_dfs=0x30
                ;;
            2)
                eval wla_enhance_dfs=0x70
                ;;
        esac

    # Read the setting for 2.4G Normal AP mode
    if [ "$wlg_if_onoff" = "on" -o "$FORCE_CREATE_wlg_VAP" = "on" ] && [ "$wlg_ap_operation_type" = "normal_ap" -o "$wlg_ap_operation_type" = "qwrap_ap" ]; then
        eval wlg_wps_onoff=\$onoff_`dniconfig get endis_wl_wps`
        eval wlg_wps_configured=\$wps_status_`dniconfig get wps_status`
        wlg_ssid=`dniconfig get wl_ssid`
        eval wlg_hide_ssid_onoff=\$onoff_inv_`dniconfig get endis_ssid_broadcast`
        eval wlg_puren_onoff=\$onoff_`dniconfig get wl_puren`
        wlg_disablecoext=`dniconfig get wl_disablecoext`
        wlg_rrm=`dniconfig get wl_rrm`
        wlg_vht_11ng=`dniconfig get wl_vht_11ng`
        wlg_mcastenhance=`dniconfig get wl_mcastenhance`
        eval wlg_sectype=\$sectype_`dniconfig get wl_sectype`
        eval wlg_auth=`dniconfig get wl_auth`
        wlg_rts=`dniconfig get wl_rts`
        wlg_frag=`dniconfig get wl_frag`
        if [ -n "`dniconfig get endis_wl_wmm`" ]; then
            eval wlg_wmm_onoff=\$onoff_`dniconfig get endis_wl_wmm`
        else
            wlg_wmm_onoff=$onoff_1
        fi
        eval wlg_country_ie_onoff=\$onoff_`dniconfig get wl_endis_country_ie`
        eval wlg_preamble=\$preamble_`dniconfig get wl_plcphdr`
        eval wlg_acl_onoff=\$onoff_`dniconfig get wl_access_ctrl_on`
        eval wlg_wds_onoff=\$onoff_`dniconfig get wds_endis_fun`
        eval wlg_wds_role=\$wds_role_`dniconfig get wds_repeater_basic`
        eval wlg_wds_repeater_assoc_onoff=\$onoff_inv_`dniconfig get wds_endis_ip_client`
        eval wlg_tpscale=\$tpscale_`dniconfig get wl_tpscale`
        wlg_wps_ap_setup_locked=`dniconfig get endis_pin`
        eval wlg_dyn_bw_rts=`dniconfig get wl_dyn_bw_rts`
        eval wlg_rps=`dniconfig get wl_rps`
        wlg_bridge=`dniconfig get i_wlg_br`
        wlg_priority=`dniconfig get i_wlg_pri`
        [ -z "$wlg_bridge" ] && wlg_bridge=$lan_ifname
        get_ifname_section _ifname _section $g_device
        wlg_doth=`dniconfig get wlg_doth`
        wlg_hyd_unmanaged=`dniconfig get wlg_hyd_unmanaged`
        wlg_ifname=$_ifname
        wlg_section=$_section
    fi

    # Read the setting for 2.4G backhaul AP mode
    if [ "$wlg_if_onoff" = "on" -o "$FORCE_CREATE_wlg_VAP" = "on" ] && [ "$wlg_ap_bh_operation_type" = "backhaul_ap" ]; then
	eval wlg_ap_bh_wps_onoff=\$onoff_`dniconfig get endis_wlg_ap_bh_wps`
        eval wlg_ap_bh_wps_configured=\$wps_status_`dniconfig get wlg_ap_bh_wps_status`
        wlg_ap_bh_wps_onoff="on"
        wlg_ap_bh_wps_configured="configured"
        wlg_ap_bh_ssid=`dniconfig get wlg_ap_bh_ssid`
        wlg_ap_bh_wps_ap_setup_locked=`dniconfig get wlg_ap_bh_endis_pin`
        eval wlg_ap_bh_hide_ssid_onoff=\$onoff_inv_`dniconfig get wlg_ap_bh_endis_ssid_broadcast`
        wlg_ap_bh_disablecoext=`dniconfig get wl_disablecoext`
        eval wlg_ap_bh_sectype=\$sectype_`dniconfig get wlg_ap_bh_sectype`
        eval wlg_ap_bh_auth=`dniconfig get wlg_ap_bh_auth`
        eval wlg_ap_bh_rts=`dniconfig get wlg_ap_bh_rts`
        eval wlg_ap_bh_dyn_bw_rts=`dniconfig get wlg_ap_bh_dyn_bw_rts`
        eval wlg_ap_bh_rps=`dniconfig get wlg_ap_bh_rps`
        if [ -n "`dniconfig get endis_wl_wmm`" ]; then
            eval wlg_ap_bh_wmm_onoff=\$onoff_`dniconfig get endis_wl_wmm`
        else
            wlg_ap_bh_wmm_onoff=$onoff_1
        fi
        wlg_ap_bh_vids=`dniconfig get wlg_ap_bh_vids`
        wlg_ap_bh_brs=`dniconfig get wlg_ap_bh_brs`
        wlg_2nd_bridge=`dniconfig get i_wlg_2nd_br`
        [ -z "$wlg_2nd_bridge" ] && wlg_2nd_bridge=$lan_ifname
        get_ifname_section _ifname _section $g_device
        wlg_ap_bh_doth=`dniconfig get wlg_ap_bh_doth`
        wlg_ap_bh_root_distance=`dniconfig get wlg_ap_bh_root_distance`
        wlg_ap_bh_ifname=$_ifname
        wlg_ap_bh_section=$_section
    fi

    # Read the setting for 2.4G station mode
    if [ "$wlg_if_onoff" = "on" -o "$FORCE_CREATE_wlg_VAP" = "on" ] && [ "$wlg_sta_operation_type" != "none" ]; then
        eval wlg_sta_wps_onoff=\$onoff_`dniconfig get endis_wlg_sta_wps`
        eval wlg_sta_wps_configured=\$wps_status_`dniconfig get wlg_sta_wps_status`
        wlg_sta_ssid=`dniconfig get wlg_sta_ssid`
        eval wlg_sta_sectype=\$sectype_`dniconfig get wlg_sta_sectype`
        eval wlg_sta_auth=`dniconfig get wlg_sta_auth`
        eval wlg_sta_rts=`dniconfig get wlg_sta_rts`
        eval wlg_sta_dyn_bw_rts=`dniconfig get wlg_sta_dyn_bw_rts`
        eval wlg_sta_rps=`dniconfig get wlg_sta_rps`
        if [ -n "`dniconfig get endis_wl_wmm`" ]; then
            eval wlg_sta_wmm_onoff=\$onoff_`dniconfig get endis_wl_wmm`
        else
            wlg_sta_wmm_onoff=$onoff_1
        fi
        wlg_sta_vids=`dniconfig get wlg_sta_vids`
        wlg_sta_brs=`dniconfig get wlg_sta_brs`
        wlg_2nd_bridge=`dniconfig get i_wlg_2nd_br`
        [ -z "$wlg_2nd_bridge" ] && wlg_2nd_bridge=$lan_ifname
        get_ifname_section _ifname _section $g_device
        wlg_sta_doth=`dniconfig get wlg_sta_doth`
        wlg_sta_ifname=$_ifname
        wlg_sta_section=$_section
        eval wlg_sta_ul_bssid=`dniconfig get wlg_ul_bssid`
    fi
    # ================================= 2.4G END ================================

    # ================================= 1st 5G START ================================
    if [ "$wla_exist" = "on" ]; then
        eval wla_operation_mode=\$operation_mode_`config get wla_operation_mode`
        for op_mode in `echo $wla_operation_mode | sed -e 's/+/ /g'`; do
            case "$op_mode" in
                ex_sta|backhaul_sta|qwrap_sta)
                    wla_sta_operation_type=$op_mode
                    ;;
                normal_ap|qwrap_ap)
                    wla_ap_operation_type=$op_mode
                    ;;
                backhaul_ap)
                    wla_ap_bh_operation_type=$op_mode
                    ;;
                *)
                    ;;
            esac
        done
    fi

    if [ "$wla_if_onoff" = "on" -o "$FORCE_CREATE_wla_VAP" = "on" ]; then
        # Read 1st 5G dependent settings.
        if [ "$wla_ap_operation_type" != "none" -o "$wla_ap_bh_operation_type" != "none" -o "$wla_sta_operation_type" != "none" ]; then
            wla_channel=`dniconfig get wla_hidden_channel`
            if [ "$wla_channel" = "0" ]; then wla_channel="auto"; fi
            wla_chmode=`dniconfig get wla_simple_mode`
            wla_hwmode=`dniconfig get wla_hwmode`
            wla_htmode=`dniconfig get wla_htmode`
            wla_cca_threshold=`dniconfig get wla_cca_threshold`

            # wireless region is NA and mode is 1733M, when enable HT160, change mode to HT80_80
            # wireless region is EU and mode is 1733M, when enable HT160, change mode to HT160
            wla_country=`dniconfig get wl_country`
            wl_ht160=`dniconfig get wla_ht160`
            if [ -z "$wla_hwmode" -a -z "$wla_htmode" ]; then
                if [ "$wl_ht160" = "1" -a "$wla_country" = "4" -a "$wla_chmode" = "9" ]; then
                    wla_chmode="11"
                elif [ "$wl_ht160" = "1" -a "$wla_country" = "10" -a "$wla_chmode" = "9" ]; then
                    wla_chmode="10"
                fi

                case "${wla_chmode}" in
                    1)
                        wla_hwmode=11a;
                        ;;
                    2)
                        wla_hwmode=11na;
                        wla_htmode=11HT20;
                        ;;
                    3)
                        wla_hwmode=11na;
                        case "$wla_channel" in
                            36|44|52|60|100|108|116|124|132|149|157)
                                wla_htmode=HT40+;
                                ;;
                            40|48|56|64|104|112|120|128|136|153|161)
                                wla_htmode=HT40-;
                                ;;
                            149|165)
                                wla_htmode=HT20;
                                ;;
                            *)
                                wla_htmode=HT40;
                                ;;
                        esac
                        ;;
                    7)
                        wla_hwmode=11ac;
                        wla_htmode=HT20;
                        ;;
                    8)
                        wla_hwmode=11ac;
                        case "$wla_channel" in
                            36|44|52|60|100|108|116|124|132|149|157)
                                wla_htmode=HT40+;
                                ;;
                            40|48|56|64|104|112|120|128|136|153|161)
                                wla_htmode=HT40-;
                                ;;
                            149|165)
                                wla_htmode=HT20;
                                ;;
                            *)
                                wla_htmode=HT40;
                                ;;
                        esac
                        ;;
                    9)
                        wla_hwmode=11ac;
                        wla_htmode=HT80;
                        ;;
                    10)
                        wla_hwmode=11ac;
                        wla_htmode=HT80_80;
                        case "$wla_channel" in
                            36|40|44|48)
                                wla_cfreq2=5775;
                                ;;
                            149|153|157|161)
                                wla_cfreq2=5210;
                                ;;
                        esac
                        ;;
                    11)
                        wla_hwmode=11ac;
                        wla_htmode=HT160;
                        ;;
                    *)
                        wla_hwmode=11na;
                        wla_htmode=HT40-;
                        ;;
                esac
            fi
            wla_keepalive=`dniconfig get wla_keepalive`
            wla_sta_dfs_en=`dniconfig get wla_sta_dfs_en`
            eval wla_bf_onoff=\$onoff_no_default_`dniconfig get wla_bf`
            eval wla_implicit_bf_onoff=\$onoff_`dniconfig get wla_implicit_bf`
            eval wla_mu_mimo_onoff=\$onoff_`dniconfig get wla_mu_mimo`
        fi
    fi

    # Read the setting for 1st 5G Normal AP mode
    if [ "$wla_if_onoff" = "on" -o "$FORCE_CREATE_wla_VAP" = "on" ] && [ "$wla_ap_operation_type" = "normal_ap" -o "$wla_ap_operation_type" = "qwrap_ap"  ]; then
        eval wla_wps_onoff=\$onoff_`dniconfig get endis_wla_wps`
        eval wla_wps_configured=\$wps_status_`dniconfig get wla_wps_status`
        if [ "$g_sameSSID" = "True" ]; then
            wla_ssid=`dniconfig get wl_ssid`
            eval wla_sectype=\$sectype_`dniconfig get wl_sectype`
            eval wla_auth=`dniconfig get wl_auth`
        else
            wla_ssid=`dniconfig get wla_ssid`
            eval wla_sectype=\$sectype_`dniconfig get wla_sectype`
            eval wla_auth=`dniconfig get wla_auth`
        fi
        eval wla_hide_ssid_onoff=\$onoff_inv_`dniconfig get wla_2nd_endis_ssid_broadcast`
        wla_disablecoext=1
        wla_rrm=`dniconfig get wla_rrm`
        wla_vht_11ng=`dniconfig get wla_vht_11ng`
        wla_mcastenhance=`dniconfig get wla_mcastenhance`
        wla_rts=`dniconfig get wla_rts`
        wla_frag=`dniconfig get wla_frag`
        if [ -n "`dniconfig get endis_wla_wmm`" ]; then
            eval wla_wmm_onoff=\$onoff_`dniconfig get endis_wla_wmm`
        else
            wla_wmm_onoff=$onoff_1
        fi
        eval wla_country_ie_onoff=\$onoff_`dniconfig get wla_endis_country_ie`
        eval wla_preamble=\$preamble_`dniconfig get wla_plcphdr`
        eval wla_acl_onoff=\$onoff_`dniconfig get wla_access_ctrl_on`
        eval wla_wds_onoff=\$onoff_`dniconfig get wla_wds_endis_fun`
        eval wla_wds_role=\$wds_role_`dniconfig get wds_repeater_basic_a`
        eval wla_wds_repeater_assoc_onoff=\$onoff_inv_`dniconfig get wds_endis_ip_client_a`
        eval wla_tpscale=\$tpscale_`dniconfig get wla_tpscale`
        wla_wps_ap_setup_locked=`dniconfig get wla_endis_pin`
        eval wla_dyn_bw_rts=`dniconfig get wla_dyn_bw_rts`
        eval wla_rps=`dniconfig get wla_rps`
        wla_bridge=`dniconfig get i_wla_br`
        wla_priority=`dniconfig get i_wla_pri`
        [ -z "$wla_bridge" ] && wla_bridge=$lan_ifname
        get_ifname_section _ifname _section $a_device
        wla_doth=`dniconfig get wla_doth`
        wla_hyd_unmanaged=`dniconfig get wla_hyd_unmanaged`
        wla_ifname=$_ifname
        wla_section=$_section
    fi

    # Read the setting for 1st 5G backhaul AP mode
    if [ "$wla_if_onoff" = "on" -a "$wla_ap_bh_operation_type" = "backhaul_ap" ]; then
        eval wla_ap_bh_wps_onoff=\$onoff_`dniconfig get endis_wla_ap_bh_wps`
        eval wla_ap_bh_wps_configured=\$wps_status_`dniconfig get wla_ap_bh_wps_status`
        wla_ap_bh_wps_onoff="on"
        wla_ap_bh_wps_configured="configured"
        wla_ap_bh_ssid=`dniconfig get wla_ap_bh_ssid`
        wla_ap_bh_wps_ap_setup_locked=`dniconfig get wla_ap_bh_endis_pin`
        eval wla_ap_bh_hide_ssid_onoff=\$onoff_inv_`dniconfig get wla_ap_bh_endis_ssid_broadcast`
        wla_ap_bh_disablecoext=`dniconfig get wla_ap_bh_disablecoext`
        eval wla_ap_bh_sectype=\$sectype_`dniconfig get wla_ap_bh_sectype`
        eval wla_ap_bh_auth=`dniconfig get wla_ap_bh_auth`
        eval wla_ap_bh_rts=`dniconfig get wla_ap_bh_rts`
        eval wla_ap_bh_dyn_bw_rts=`dniconfig get wla_ap_bh_dyn_bw_rts`
        eval wla_ap_bh_rps=`dniconfig get wla_ap_bh_rps`
        if [ -n "`dniconfig get endis_wla_wmm`" ]; then
            eval wla_ap_bh_wmm_onoff=\$onoff_`dniconfig get endis_wla_wmm`
        else
            wla_ap_bh_wmm_onoff=$onoff_1
        fi
        wla_ap_bh_vids=`dniconfig get wla_ap_bh_vids`
        wla_ap_bh_brs=`dniconfig get wla_ap_bh_brs`
        get_ifname_section _ifname _section $a_device
        wla_ap_bh_doth=`dniconfig get wla_ap_bh_doth`
        wla_ap_bh_root_distance=`dniconfig get wla_ap_bh_root_distance`
        wla_ap_bh_ifname=$_ifname
        wla_ap_bh_section=$_section
        wla_bridge=`dniconfig get i_wla_br`
        wla_priority=`dniconfig get i_wla_pri`
        [ -z "$wla_bridge" ] && wla_bridge=$lan_ifname
    fi

    # Read the setting for 1st 5G station mode
    if [ "$wla_if_onoff" = "on" -a "$wla_sta_operation_type" != "none" ]; then
        eval wla_sta_wps_onoff=\$onoff_`dniconfig get endis_wla_sta_wps`
        eval wla_sta_wps_configured=\$wps_status_`dniconfig get wla_sta_wps_status`
        wla_sta_ssid=`dniconfig get wla_sta_ssid`
        eval wla_sta_sectype=\$sectype_`dniconfig get wla_sta_sectype`
        eval wla_sta_auth=`dniconfig get wla_sta_auth`
        eval wla_sta_rts=`dniconfig get wla_sta_rts`
        eval wla_sta_dyn_bw_rts=`dniconfig get wla_sta_dyn_bw_rts`
        eval wla_sta_rps=`dniconfig get wla_sta_rps`
        if [ -n "`dniconfig get endis_wla_wmm`" ]; then
            eval wla_sta_wmm_onoff=\$onoff_`dniconfig get endis_wla_wmm`
        else
            wla_sta_wmm_onoff=$onoff_1
        fi
        wla_sta_vids=`dniconfig get wla_sta_vids`
        wla_sta_brs=`dniconfig get wla_sta_brs`
        get_ifname_section _ifname _section $a_device
        wla_sta_doth=`dniconfig get wla_sta_doth`
        wla_sta_caprssi=`dniconfig get wla_sta_caprssi`
        wla_sta_ifname=$_ifname
        wla_sta_section=$_section
        wla_bridge=`dniconfig get i_wla_br`
        wla_priority=`dniconfig get i_wla_pri`
        eval wla_sta_ul_bssid=`dniconfig get wla_ul_bssid`
        [ -z "$wla_bridge" ] && wla_bridge=$lan_ifname
    fi
    # ================================= 1st 5G END ================================

    if [ "$wl_cb_if_onoff" = "on" ]; then
            # Override setting for cb.
        if [ "$wl_cb_mode" = "2.4g" ]; then
            wlg_ssid=`dniconfig get bridge_wl_ssid`
            eval wlg_sectype=\$sectype_`dniconfig get wl_bridge_sectype`
            eval wlg_auth=`dniconfig get wl_bridge_auth`
            wlg_hwmode=auto
            wlg_htmode=auto
            wlg_channel="auto"
            wlg_wps_onoff="off"
            # fix r7500v2 2.4G bridge disconnection issue
            wlg_disablecoext=1
        else
            wla_ssid=`dniconfig get bridge_wla_ssid`
            eval wla_sectype=\$sectype_`dniconfig get wla_bridge_sectype`
            eval wla_auth=`dniconfig get wla_bridge_auth`
            wla_hwmode=auto
            wla_htmode=auto
            wla_channel="auto"
            wla_wps_onoff="off"
        fi
    fi

    if [ "$wlg_guest_if_onoff" = "on" -o "$FORCE_CREATE_wlg_guest_VAP" = "on" ]; then
        wlg_guest_ssid=`dniconfig get wlg1_ssid`
        eval wlg_guest_sectype=\$sectype_`dniconfig get wlg1_sectype`
        eval wlg_guest_auth=`dniconfig get wlg1_auth`
        eval wlg_guest_rts=`dniconfig get wlg_guest_rts`
        eval wlg_guest_hide_ssid_onoff=\$onoff_inv_`dniconfig get wlg1_endis_guestSSIDbro`
        eval wlg_guest_wps_onoff="off"
        eval wlg_guest_dyn_bw_rts=`dniconfig get wlg1_dyn_bw_rts`
        eval wlg_guest_rps=`dniconfig get wlg1_rps`
        if [ -n "`dniconfig get endis_wl_wmm`" ]; then
            eval wlg_guest_wmm_onoff=\$onoff_`dniconfig get endis_wl_wmm`
        else
            wlg_guest_wmm_onoff=$onoff_1
        fi
        tmp_allow_see_and_access=`dniconfig get wlg1_endis_allow_see_and_access`
        if [ "$tmp_allow_see_and_access" = "" ]; then
            wlg_guest_lan_restricted_access_onoff="on"
        else
            eval wlg_guest_lan_restricted_access_onoff=\$onoff_inv_`dniconfig get wlg1_endis_allow_see_and_access`
        fi
        eval wlg_guest_wireless_isolation_onoff=\$onoff_inv_`dniconfig get wlg1_endis_allow_see_and_access`
        wlg_guest_disablecoext=`dniconfig get wl_disablecoext`
        wlg_guest_rrm=`dniconfig get wl_rrm`
        wlg_guest_vht_11ng=`dniconfig get wl_vht_11ng`
        wlg_guest_bridge=`dniconfig get i_wlg_guest_br`
        wlg_guest_priority=`dniconfig get i_wlg_guest_pri`
        [ -z "$wlg_guest_bridge" ] && wlg_guest_bridge=$lan_ifname
        get_ifname_section _ifname _section $g_device
        wlg_guest_doth=`dniconfig get wlg_guest_doth`
        wlg_guest_hyd_unmanaged=`dniconfig get wlg_guest_hyd_unmanaged`
        wlg_guest_ifname=$_ifname
        wlg_guest_section=$_section
    fi

    if [ "$wlg_arlo_if_onoff" = "on" -o "$FORCE_CREATE_wlg_arlo_VAP" = "on" ]; then
        wlg_arlo_ssid=`dniconfig get wlg_arlo_ssid`
        eval wlg_arlo_sectype=\$sectype_`dniconfig get wlg_arlo_sectype`
        eval wlg_arlo_auth=`dniconfig get wlg_arlo_auth`
        eval wlg_arlo_rts=`dniconfig get wlg_arlo_rts`
        if [ -n "`dniconfig get endis_wl_wmm`" ]; then
            eval wlg_arlo_wmm_onoff=\$onoff_`dniconfig get endis_wl_wmm`
        else
            wlg_arlo_wmm_onoff=$onoff_1
        fi
        eval wlg_arlo_hide_ssid_onoff=\$onoff_inv_`dniconfig get wlg_arlo_endis_arloSSIDbro`
        wlg_arlo_wps_onoff=on
        eval wlg_arlo_wps_configured=\$wps_status_`dniconfig get wps_status`
        wlg_arlo_wps_ap_setup_locked=`dniconfig get endis_pin`
        eval wlg_arlo_dyn_bw_rts=`dniconfig get wlg_arlo_dyn_bw_rts`
        eval wlg_arlo_rps=`dniconfig get wlg_arlo_rps`
        tmp_allow_see_and_access=`dniconfig get wlg_arlo_endis_allow_see_and_access`
        if [ "$tmp_allow_see_and_access" = "" ]; then
            wlg_arlo_lan_restricted_access_onoff="on"
        else
            eval wlg_arlo_lan_restricted_access_onoff=\$onoff_inv_`dniconfig get wlg_arlo_endis_allow_see_and_access`
        fi
        eval wlg_arlo_wireless_isolation_onoff="on"
        wlg_arlo_disablecoext=`dniconfig get wl_disablecoext`
        wlg_arlo_rrm=`dniconfig get wl_rrm`
        wlg_arlo_bridge=`dniconfig get i_wlg_arlo_br`
        wlg_arlo_priority=`dniconfig get i_wlg_arlo_pri`
        [ -z "$wlg_arlo_bridge" ] && wlg_arlo_bridge=$lan_ifname
        get_ifname_section _ifname _section $g_device
        wlg_arlo_doth=`dniconfig get wlg_arlo_doth`
        wlg_arlo_ifname=$_ifname
        wlg_arlo_section=$_section
    fi

    product_type=`/bin/cat /tmp/orbi_type`

    if [ "$product_type" = "Base" -a  "$wla_guest_if_onoff" = "on" -o "$FORCE_CREATE_wla_guest_VAP" = "on" ]; then
        if [ "$g_sameSSID" = "True" ]; then
            wla_guest_ssid=`dniconfig get wlg1_ssid`
            eval wla_guest_sectype=\$sectype_`dniconfig get wlg1_sectype`
            eval wla_guest_auth=`dniconfig get wlg1_auth`
            [ "$wla2_guest_if_onoff" = "on" ] && wla_guest_if_onoff="$wla2_guest_if_onoff"
        else
            wla_guest_ssid=`dniconfig get wla1_ssid`
            eval wla_guest_sectype=\$sectype_`dniconfig get wla1_sectype`
            eval wla_guest_auth=`dniconfig get wla1_auth`
        fi
        eval wla_guest_rts=`dniconfig get wla_guest_rts`
        eval wla_guest_hide_ssid_onoff=\$onoff_inv_`dniconfig get wla1_2nd_endis_guestSSIDbro`
        eval wla_guest_wps_onoff="off"
        eval wla_guest_dyn_bw_rts=`dniconfig get wla1_dyn_bw_rts`
        eval wla_guest_rps=`dniconfig get wla1_rps`
        if [ -n "`dniconfig get endis_wla_wmm`" ]; then
            eval wla_guest_wmm_onoff=\$onoff_`dniconfig get endis_wla_wmm`
        else
            wla_guest_wmm_onoff=$onoff_1
        fi
        tmp_allow_see_and_access=`dniconfig get wla1_endis_allow_see_and_access`
        wla1_2nd_allow_see_and_access=`dniconfig get wla1_2nd_endis_allow_see_and_access`
        if [ "$tmp_allow_see_and_access" = "" ]; then
            wla_guest_lan_restricted_access_onoff="on"
        else
            if [ "$wla1_2nd_allow_see_and_access" = "" ]; then
                eval wla_guest_lan_restricted_access_onoff=\$onoff_inv_`dniconfig get wla1_endis_allow_see_and_access`
            else
                eval wla_guest_lan_restricted_access_onoff=\$onoff_inv_`dniconfig get wla1_2nd_endis_allow_see_and_access`
            fi
        fi
        eval wla_guest_wireless_isolation_onoff=\$onoff_inv_`dniconfig get wla1_endis_allow_see_and_access`
        if [ "$wla1_2nd_allow_see_and_access" != "" ];then
            eval wla_guest_wireless_isolation_onoff=\$onoff_inv_`dniconfig get wla1_2nd_endis_allow_see_and_access`
        fi
        wla_guest_rrm=`dniconfig get wla_rrm`
        wla_guest_vht_11ng=`dniconfig get wla_vht_11ng`
        wla_guest_bridge=`dniconfig get i_wla_guest_br`
        wla_guest_priority=`dniconfig get i_wla_guest_pri`
        [ -z "$wla_guest_bridge" ] && wla_guest_bridge=$lan_ifname
        get_ifname_section _ifname _section $a_device
        wla_guest_doth=`dniconfig get wla_guest_doth`
        wla_guest_hyd_unmanaged=`dniconfig get wla_guest_hyd_unmanaged`
        wla_guest_ifname=$_ifname
        wla_guest_section=$_section
    fi

    if [ "$wlg_byod_if_onoff" = "on" -o "$FORCE_CREATE_wlg_byod_VAP" = "on" ]; then
        wlg_byod_ssid=`dniconfig get wlg2_ssid`
        eval wlg_byod_sectype=\$sectype_`dniconfig get wlg2_sectype`
        eval wlg_byod_auth=`dniconfig get wlg2_auth`
        eval wlg_byod_rts=`dniconfig get wlg_byod_rts`
        eval wlg_byod_hide_ssid_onoff=\$onoff_inv_`dniconfig get wlg2_endis_byodSSIDbro`
        eval wlg_byod_wps_onoff="off"
        eval wlg_byod_dyn_bw_rts=`dniconfig get wlg2_dyn_bw_rts`
        eval wlg_byod_rps=`dniconfig get wlg2_rps`
        if [ -n "`dniconfig get endis_wl_wmm`" ]; then
            eval wlg_byod_wmm_onoff=\$onoff_`dniconfig get endis_wl_wmm`
        else
            wlg_byod_wmm_onoff=$onoff_1
        fi
        tmp_allow_see_and_access=`dniconfig get wlg2_endis_allow_see_and_access`
        if [ "$tmp_allow_see_and_access" = "" ]; then
            wlg_byod_lan_restricted_access_onoff="on"
        else
            eval wlg_byod_lan_restricted_access_onoff=\$onoff_inv_`dniconfig get wlg2_endis_allow_see_and_access`
        fi
        eval wlg_byod_wireless_isolation_onoff=\$onoff_inv_`dniconfig get wlg2_endis_allow_see_and_access`
        wlg_byod_disablecoext=`dniconfig get wl_disablecoext`
        wlg_byod_rrm=`dniconfig get wl_rrm`
        wlg_byod_bridge=`dniconfig get i_wlg_byod_br`
        wlg_byod_priority=`dniconfig get i_wlg_byod_pri`
        [ -z "$wlg_byod_bridge" ] && wlg_byod_bridge=$lan_ifname
        get_ifname_section _ifname _section $g_device
        wlg_byod_doth=`dniconfig get wlg_byod_doth`
        wlg_byod_hyd_unmanaged=`dniconfig get wlg_byod_hyd_unmanaged`
        wlg_byod_ifname=$_ifname
        wlg_byod_section=$_section
    fi

    if [ "$wla_byod_if_onoff" = "on" -o "$FORCE_CREATE_wla_byod_VAP" = "on" ]; then
        if [ "$g_sameSSID" = "True" ]; then
            wla_byod_ssid=`dniconfig get wlg2_ssid`
            eval wla_byod_sectype=\$sectype_`dniconfig get wlg2_sectype`
            eval wla_byod_auth=`dniconfig get wlg2_auth`
        else
            wla_byod_ssid=`dniconfig get wla2_ssid`
            eval wla_byod_sectype=\$sectype_`dniconfig get wla2_sectype`
            eval wla_byod_auth=`dniconfig get wla2_auth`
        fi
        eval wla_byod_rts=`dniconfig get wla_byod_rts`
        eval wla_byod_hide_ssid_onoff=\$onoff_inv_`dniconfig get wla2_endis_byodSSIDbro`
        eval wla_byod_wps_onoff="off"
        eval wla_byod_dyn_bw_rts=`dniconfig get wla2_dyn_bw_rts`
        eval wla_byod_rps=`dniconfig get wla2_rps`
        if [ -n "`dniconfig get endis_wla_wmm`" ]; then
            eval wla_byod_wmm_onoff=\$onoff_`dniconfig get endis_wla_wmm`
        else
            wla_byod_wmm_onoff=$onoff_1
        fi
        tmp_allow_see_and_access=`dniconfig get wla2_endis_allow_see_and_access`
        if [ "$tmp_allow_see_and_access" = "" ]; then
            wla_byod_lan_restricted_access_onoff="on"
        else
            eval wla_byod_lan_restricted_access_onoff=\$onoff_inv_`dniconfig get wla2_endis_allow_see_and_access`
        fi
        eval wla_byod_wireless_isolation_onoff=\$onoff_inv_`dniconfig get wla2_endis_allow_see_and_access`
        wla_byod_rrm=`dniconfig get wla_rrm`
        wla_byod_bridge=`dniconfig get i_wla_byod_br`
        wla_byod_priority=`dniconfig get i_wla_byod_pri`
        [ -z "$wla_byod_bridge" ] && wla_byod_bridge=$lan_ifname
        get_ifname_section _ifname _section $a_device
        wla_byod_doth=`dniconfig get wla_byod_doth`
        wla_byod_hyd_unmanaged=`dniconfig get wla_byod_hyd_unmanaged`
        wla_byod_ifname=$_ifname
        wla_byod_section=$_section
    fi

    if [ "$wlg_setup_if_onoff" = "on" ]; then
        wlg_setup_ssid=`dniconfig get wlg_setup_ssid`
        eval wlg_setup_sectype=\$sectype_`dniconfig get wlg_setup_sectype`
        eval wlg_setup_auth=`dniconfig get wlg_setup_auth`
        eval wlg_setup_rts=`dniconfig get wlg_setup_rts`
        if [ -n "`dniconfig get endis_wl_wmm`" ]; then
            eval wlg_setup_wmm_onoff=\$onoff_`dniconfig get endis_wl_wmm`
        else
            wlg_setup_wmm_onoff=$onoff_1
        fi
        eval wlg_setup_hide_ssid_onoff=\$onoff_inv_`dniconfig get wlg_setup_endis_setupSSIDbro`
        eval wlg_setup_wps_onoff="off"
        eval wlg_setup_dyn_bw_rts=`dniconfig get wlg_setup_dyn_bw_rts`
        eval wlg_setup_rps=`dniconfig get wlg_setup_rps`
        tmp_allow_see_and_access=`dniconfig get wlg_setup_endis_allow_see_and_access`
        if [ "$tmp_allow_see_and_access" = "" ]; then
            wlg_setup_lan_restricted_access_onoff="on"
        else
            eval wlg_setup_lan_restricted_access_onoff=\$onoff_inv_`dniconfig get wlg_setup_endis_allow_see_and_access`
        fi
        eval wlg_setup_wireless_isolation_onoff=\$onoff_inv_`dniconfig get wlg_setup_endis_allow_see_and_access`
        wlg_setup_disablecoext=`dniconfig get wl_disablecoext`
        wlg_setup_rrm=`dniconfig get wl_rrm`
        wlg_setup_bridge=`dniconfig get i_wlg_setup_br`
        wlg_setup_priority=`dniconfig get i_wlg_setup_pri`
        [ -z "$wlg_setup_bridge" ] && wlg_setup_bridge=$lan_ifname
        get_ifname_section _ifname _section $g_device
        wlg_setup_doth=`dniconfig get wlg_setup_doth`
        wlg_setup_ifname=$_ifname
        wlg_setup_section=$_section
    fi

    if [ "$wla_setup_if_onoff" = "on" ]; then
        wla_setup_ssid=`dniconfig get wla_setup_ssid`
        eval wla_setup_sectype=\$sectype_`dniconfig get wla_setup_sectype`
        eval wla_setup_auth=`dniconfig get wla_setup_auth`
        eval wla_setup_rts=`dniconfig get wla_setup_rts`
        if [ -n "`dniconfig get endis_wla_wmm`" ]; then
            eval wla_setup_wmm_onoff=\$onoff_`dniconfig get endis_wla_wmm`
        else
            wla_setup_wmm_onoff=$onoff_1
        fi
        eval wla_setup_hide_ssid_onoff=\$onoff_inv_`dniconfig get wla_setup_endis_setupSSIDbro`
        eval wla_setup_wps_onoff="off"
        eval wla_setup_dyn_bw_rts=`dniconfig get wla_setup_dyn_bw_rts`
        eval wla_setup_rps=`dniconfig get wla_setup_rps`
        tmp_allow_see_and_access=`dniconfig get wla_setup_endis_allow_see_and_access`
        if [ "$tmp_allow_see_and_access" = "" ]; then
            wla_setup_lan_restricted_access_onoff="on"
        else
            eval wla_setup_lan_restricted_access_onoff=\$onoff_inv_`dniconfig get wla_setup_endis_allow_see_and_access`
        fi
        eval wla_setup_wireless_isolation_onoff=\$onoff_inv_`dniconfig get wla_setup_endis_allow_see_and_access`
        wla_setup_disablecoext=`dniconfig get wla_disablecoext`
        wla_setup_rrm=`dniconfig get wla_rrm`
        wla_setup_bridge=`dniconfig get i_wla_setup_br`
        wla_setup_priority=`dniconfig get i_wla_setup_pri`
        [ -z "$wla_setup_bridge" ] && wla_setup_bridge=$lan_ifname
        get_ifname_section _ifname _section $a_device
        wla_setup_doth=`dniconfig get wla_setup_doth`
        wla_setup_ifname=$_ifname
        wla_setup_section=$_section
    fi

    # ================================= 2nd 5G START ================================
    if [ "$wla2_exist" = "on" ]; then
        eval wla2_operation_mode=\$operation_mode_`config get wla_2nd_operation_mode`
        for op_mode in `echo $wla2_operation_mode | sed -e 's/+/ /g'`; do
            case "$op_mode" in
                ex_sta|backhaul_sta|qwrap_sta)
                    wla2_sta_operation_type=$op_mode
                    ;;
                normal_ap|qwrap_ap)
                    wla2_ap_operation_type=$op_mode
                    ;;
                backhaul_ap)
                    wla2_ap_bh_operation_type=$op_mode
                    ;;
                *)
                    ;;
            esac
        done
    fi

    if [ "$wla2_if_onoff" = "on" -o "$FORCE_CREATE_wla2_VAP" = "on" ]; then
        # Read radio dependent settings.
        if [ "$wla2_ap_operation_type" != "none" -o "$wla2_ap_bh_operation_type" != "none" -o "$wla2_sta_operation_type" != "none" ]; then
            wla2_channel=`dniconfig get wla_2nd_hidden_channel`
            if [ "$wla2_channel" = "0" ]; then wla2_channel="auto"; fi
            wla2_chmode=`dniconfig get wla_2nd_simple_mode`
            wla2_cca_threshold=`dniconfig get wla_2nd_cca_threshold`

            # wireless region is NA and mode is 1733M, when enable HT160, change mode to HT80_80
            # wireless region is EU and mode is 1733M, when enable HT160, change mode to HT160
            wla2_country=`dniconfig get wl_country`
            wla2_ht160=`dniconfig get wla_2nd_ht160`
            [ -z "$wla2_ht160" ] && wla2_ht160=0
            if [ "$wla2_ht160" = "1" -a "$wla2_country" = "4" -a "$wla2_chmode" = "9" ]; then
                wla2_chmode="11"
            elif [ "$wla2_ht160" = "1" -a "$wla2_country" = "10" -a "$wla2_chmode" = "9" ]; then
                wla2_chmode="10"
            fi

            case "${wla2_chmode}" in
                1)
                    wla2_hwmode=11a;
                    ;;
                2)
                    wla2_hwmode=11na;
                    wla2_htmode=11HT20;
                    ;;
                3)
                    wla2_hwmode=11na;
                    case "$wla2_channel" in
                        36|44|52|60|100|108|116|124|132|149|157)
                            wla2_htmode=HT40+;
                            ;;
                        40|48|56|64|104|112|120|128|136|153|161)
                            wla2_htmode=HT40-;
                            ;;
                        149|165)
                            wla2_htmode=HT20;
                            ;;
                        *)
                            wla2_htmode=HT40;
                            ;;
                    esac
                    ;;
                7)
                    wla2_hwmode=11ac;
                    wla2_htmode=HT20;
                    ;;
                8)
                    wla2_hwmode=11ac;
                    case "$wla2_channel" in
                        36|44|52|60|100|108|116|124|132|149|157)
                            wla2_htmode=HT40+;
                            ;;
                        40|48|56|64|104|112|120|128|136|153|161)
                            wla2_htmode=HT40-;
                            ;;
                        149|165)
                            wla2_htmode=HT20;
                            ;;
                        *)
                            wla2_htmode=HT40;
                            ;;
                    esac
                    ;;
                9)
                    wla2_hwmode=11ac;
                    wla2_htmode=HT80;
                    ;;
                10)
                    wla2_hwmode=11ac;
                    wla2_htmode=HT80_80;
                    case "$wla2_channel" in
                        36|40|44|48)
                            wla2_cfreq2=5775;
                            ;;
                        149|153|157|161)
                            wla2_cfreq2=5210;
                            ;;
                    esac
                    ;;
                11)
                    wla2_hwmode=11ac;
                    wla2_htmode=HT160;
                    ;;
                *)
                    wla2_hwmode=11na;
                    wla2_htmode=HT40-;
                    ;;
            esac
            wla2_keepalive=`dniconfig get wla_2nd_keepalive`
            wla2_ul_hyst=`dniconfig get wla_2nd_ul_hyst`
            wla2_sta_dfs_en=`dniconfig get wla_2nd_sta_dfs_en`
            eval wla2_bf_onoff=\$onoff_no_default_`dniconfig get wla_2nd_bf`
            eval wla2_implicit_bf_onoff=\$onoff_`dniconfig get wla_2nd_implicit_bf`
            eval wla2_mu_mimo_onoff=\$onoff_`dniconfig get wla_2nd_mu_mimo`
            
            wla2_enhance_dfs_mode=`dniconfig get wla_2nd_enhance_dfs`
            case "${wla2_enhance_dfs_mode}" in
                0)
                    eval wla2_enhance_dfs=0x00
                    ;;
                1)
                    eval wla2_enhance_dfs=0x30
                    ;;
                2)
                    eval wla2_enhance_dfs=0x70
                    ;;
            esac
        fi
        # Read the setting for 2nd 5G Normal AP mode
        if [ "$wla2_if_onoff" = "on" -o "$FORCE_CREATE_wla2_VAP" = "on" ] && [ "$wla2_ap_operation_type" = "normal_ap" -o "$wla2_ap_operation_type" = "qwrap_ap" ]; then
            eval wla2_wps_onoff=\$onoff_`dniconfig get endis_wla_2nd_wps`
            eval wla2_wps_configured=\$wps_status_`dniconfig get wla_2nd_wps_status`
            if [ "$g_sameSSID" = "True" ]; then
                wla2_ssid=`dniconfig get wl_ssid`
                eval wla2_sectype=\$sectype_`dniconfig get wl_sectype`
                eval wla2_auth=`dniconfig get wl_auth`
            else
                wla2_ssid=`dniconfig get wla_2nd_ssid`
                eval wla2_sectype=\$sectype_`dniconfig get wla_2nd_sectype`
                eval wla2_auth=`dniconfig get wla_2nd_auth`
            fi
            eval wla2_hide_ssid_onoff=\$onoff_inv_`dniconfig get wla_2nd_endis_ssid_broadcast`
            wla2_disablecoext=1
            wla2_rrm=`dniconfig get wla_2nd_rrm`
            wla2_vht_11ng=`dniconfig get wla_2nd_vht_11ng`
            wla2_mcastenhance=`dniconfig get wla_2nd_mcastenhance`
            eval wla2_rts=`dniconfig get wla_2nd_rts`
            if [ -n "`dniconfig get endis_wla_2nd_wmm`" ]; then
                eval wla2_wmm_onoff=\$onoff_`dniconfig get endis_wla_2nd_wmm`
            else
                wla2_wmm_onoff=$onoff_1
            fi
            eval wla2_country_ie_onoff=\$onoff_`dniconfig get wla_2nd_endis_country_ie`
            eval wla2_preamble=\$preamble_`dniconfig get wla_2nd_plcphdr`
            eval wla2_tpscale=\$tpscale_`dniconfig get wla_2nd_tpscale`
            wla2_wps_ap_setup_locked=`dniconfig get wla_2nd_endis_pin`
            eval wla2_dyn_bw_rts=`dniconfig get wla_2nd_dyn_bw_rts`
            eval wla2_rps=`dniconfig get wla_2nd_rps`
            wla2_bridge=`dniconfig get i_wla_2nd_br`
            wla2_priority=`dniconfig get i_wla_2nd_pri`
            [ -z "$wla2_bridge" ] && wla_2nd_bridge=$lan_ifname
            get_ifname_section _ifname _section $a2_device
            wla2_doth=`dniconfig get wla_2nd_doth`
            wla2_hyd_unmanaged=`dniconfig get wla_2nd_hyd_unmanaged`
            wla2_ifname=$_ifname
            wla2_section=$_section
        fi

        # Read the setting for 2nd 5G backhaul AP mode
        if [ "$wla2_ap_bh_operation_type" = "backhaul_ap" ]; then
            eval wla2_ap_bh_wps_onoff=\$onoff_`dniconfig get endis_wla_2nd_ap_bh_wps`
            eval wla2_ap_bh_wps_configured=\$wps_status_`dniconfig get wla_2nd_ap_bh_wps_status`
            wla2_ap_bh_wps_onoff="on"
            wla2_ap_bh_wps_configured="configured"
            wla2_ap_bh_ssid=`dniconfig get wla_2nd_ap_bh_ssid`
            wla2_ap_bh_wps_ap_setup_locked=`dniconfig get wla_2nd_ap_bh_endis_pin`
            eval wla2_ap_bh_hide_ssid_onoff=\$onoff_inv_`dniconfig get wla_2nd_ap_bh_endis_ssid_broadcast`
            wla2_ap_bh_disablecoext=`dniconfig get wla_2nd_ap_bh_disablecoext`
            eval wla2_ap_bh_sectype=\$sectype_`dniconfig get wla_2nd_ap_bh_sectype`
            eval wla2_ap_bh_auth=`dniconfig get wla_2nd_ap_bh_auth`
            eval wla2_ap_bh_rts=`dniconfig get wla_2nd_ap_bh_rts`
            eval wla2_ap_bh_dyn_bw_rts=`dniconfig get wla_2nd_ap_bh_dyn_bw_rts`
            eval wla2_ap_bh_rps=`dniconfig get wla_2nd_ap_bh_rps`
            if [ -n "`dniconfig get endis_wla_2nd_wmm`" ]; then
                eval wla2_ap_bh_wmm_onoff=\$onoff_`dniconfig get endis_wla_2nd_wmm`
            else
                wla2_ap_bh_wmm_onoff=$onoff_1
            fi
            get_ifname_section _ifname _section $a2_device
            wla2_ap_bh_doth=`dniconfig get wla_2nd_ap_bh_doth`
            wla2_ap_bh_root_distance=`dniconfig get wla_2nd_ap_bh_root_distance`
            wla2_ap_bh_ifname=$_ifname
            wla2_ap_bh_section=$_section
            wla2_bridge=`dniconfig get i_wla_2nd_br`
            wla2_priority=`dniconfig get i_wla_2nd_pri`
            [ -z "$wla2_bridge" ] && wla_2nd_bridge=$lan_ifname
        fi

        # Read the setting for 2nd 5G station mode
        if [ "$wla2_sta_operation_type" != "none" ]; then
            eval wla2_sta_wps_onoff=\$onoff_`dniconfig get endis_wla_2nd_sta_wps`
            eval wla2_sta_wps_configured=\$wps_status_`dniconfig get wla_2nd_sta_wps_status`
            wla2_sta_ssid=`dniconfig get wla_2nd_sta_ssid`
            eval wla2_sta_sectype=\$sectype_`dniconfig get wla_2nd_sta_sectype`
            eval wla2_sta_auth=`dniconfig get wla_2nd_sta_auth`
            eval wla2_sta_rts=`dniconfig get wla_2nd_sta_rts`
            eval wla2_sta_dyn_bw_rts=`dniconfig get wla_2nd_sta_dyn_bw_rts`
            eval wla2_sta_rps=`dniconfig get wla_2nd_sta_rps`
            if [ -n "`dniconfig get endis_wla_2nd_wmm`" ]; then
                eval wla2_sta_wmm_onoff=\$onoff_`dniconfig get endis_wla_2nd_wmm`
            else
                wla2_sta_wmm_onoff=$onoff_1
            fi
            get_ifname_section _ifname _section $a2_device
            wla2_sta_doth=`dniconfig get wla_2nd_sta_doth`
            wla2_sta_ifname=$_ifname
            wla2_sta_section=$_section
            wla2_bridge=`dniconfig get i_wla_2nd_br`
            wla2_priority=`dniconfig get i_wla_2nd_pri`
            wla2_sta_caprssi=`dniconfig get wla_2nd_sta_caprssi`
            eval wla2_sta_ul_bssid=`dniconfig get wla_2nd_ul_bssid`
            [ -z "$wla2_bridge" ] && wla_2nd_bridge=$lan_ifname
        fi
 
        # 2nd 5G Guest
        if [ "$wla2_guest_if_onoff" = "on" -o "$FORCE_CREATE_wla2_guest_VAP" = "on" ]; then
            if [ "$g_sameSSID" = "True" ]; then
                wla2_guest_ssid=`dniconfig get wlg1_ssid`
                eval wla2_guest_sectype=\$sectype_`dniconfig get wlg1_sectype`
                eval wla2_guest_auth=`dniconfig get wlg1_auth`
            else
                wla2_guest_ssid=`dniconfig get wla1_2nd_ssid`
                eval wla2_guest_sectype=\$sectype_`dniconfig get wla1_2nd_sectype`
                eval wla2_guest_auth=`dniconfig get wla1_2nd_auth`
            fi

            eval wla2_guest_hide_ssid_onoff=\$onoff_inv_`dniconfig get wla1_2nd_endis_guestSSIDbro`
            eval wla2_guest_wps_onoff="off"
            eval wla2_guest_dyn_bw_rts=`dniconfig get wla1_2nd_dyn_bw_rts`
            eval wla2_guest_rps=`dniconfig get wla1_2nd_rps`
            if [ -n "`dniconfig get endis_wla_2nd_wmm`" ]; then
                eval wla2_guest_wmm_onoff=\$onoff_`dniconfig get endis_wla_2nd_wmm`
            else
                wla2_guest_wmm_onoff=$onoff_1
            fi
            tmp2_allow_see_and_access=`dniconfig get wla1_2nd_endis_allow_see_and_access`
            if [ "$tmp2_allow_see_and_access" = "" ]; then
                wla2_guest_lan_restricted_access_onoff="on"
            else
                eval wla2_guest_lan_restricted_access_onoff=\$onoff_inv_`dniconfig get wla1_2nd_endis_allow_see_and_access`
            fi
                eval wla2_guest_wireless_isolation_onoff=\$onoff_inv_`dniconfig get wla1_2nd_endis_allow_see_and_access`
                wla2_guest_rrm=`dniconfig get wla_2nd_rrm`
                wla2_guest_bridge=`dniconfig get i_wla_2nd_guest_br`
                wla2_guest_priority=`dniconfig get i_wla_2nd_guest_pri`
                [ -z "$wla2_guest_bridge" ] && wla2_guest_bridge=$lan_ifname
                get_ifname_section _ifname _section $a2_device
                wla2_guest_doth=`dniconfig get wla_2nd_guest_doth`
                wla2_guest_hyd_unmanaged=`dniconfig get wla_2nd_guest_hyd_unmanaged`
                wla2_guest_ifname=$_ifname
                wla2_guest_section=$_section
          fi
    fi


    if [ "$wla2_byod_if_onoff" = "on" -o "$FORCE_CREATE_wla2_byod_VAP" = "on" ]; then
        if [ "$g_sameSSID" = "True" ]; then
            wla2_byod_ssid=`dniconfig get wlg2_ssid`
            eval wla2_byod_sectype=\$sectype_`dniconfig get wlg2_sectype`
            eval wla2_byod_auth=`dniconfig get wlg2_auth`
        else
            wla2_byod_ssid=`dniconfig get wla2_2nd_ssid`
            eval wla2_byod_sectype=\$sectype_`dniconfig get wla2_2nd_sectype`
            eval wla2_byod_auth=`dniconfig get wla2_2nd_auth`
        fi
        eval wla2_byod_rts=`dniconfig get wla_2nd_byod_rts`
        eval wla2_byod_hide_ssid_onoff=\$onoff_inv_`dniconfig get wla2_2nd_endis_byodSSIDbro`
        eval wla2_byod_wps_onoff="off"
        eval wla2_byod_dyn_bw_rts=`dniconfig get wla2_2nd_dyn_bw_rts`
        eval wla2_byod_rps=`dniconfig get wla2_2nd_rps`
        if [ -n "`dniconfig get endis_wla_2nd_wmm`" ]; then
            eval wla2_byod_wmm_onoff=\$onoff_`dniconfig get endis_wla_2nd_wmm`
        else
                wla2_byod_wmm_onoff=$onoff_1
        fi
        tmp_allow_see_and_access=`dniconfig get wla2_2nd_endis_allow_see_and_access`
        if [ "$tmp_allow_see_and_access" = "" ]; then
            wla2_byod_lan_restricted_access_onoff="on"
        else
            eval wla2_byod_lan_restricted_access_onoff=\$onoff_inv_`dniconfig get wla2_2nd_endis_allow_see_and_access`
        fi
        eval wla2_byod_wireless_isolation_onoff=\$onoff_inv_`dniconfig get wla2_2nd_endis_allow_see_and_access`
        wla2_byod_rrm=`dniconfig get wla_2nd_rrm`
        wla2_byod_bridge=`dniconfig get i_wla_2nd_byod_br`
        wla2_byod_priority=`dniconfig get i_wla_2nd_byod_pri`
        [ -z "$wla2_byod_bridge" ] && wla2_byod_bridge=$lan_ifname
        get_ifname_section _ifname _section $a2_device
        wla2_byod_doth=`dniconfig get wla_2nd_byod_doth`
        wla2_byod_hyd_unmanaged=`dniconfig get wla_2nd_byod_hyd_unmanaged`
        wla2_byod_ifname=$_ifname
        wla2_byod_section=$_section
    fi

   if [ "$wla2_setup_if_onoff" = "on" ]; then
        wla2_setup_ssid=`dniconfig get wla_2nd_setup_ssid`
        eval wla2_setup_sectype=\$sectype_`dniconfig get wla_2nd_setup_sectype`
        eval wla2_setup_auth=`dniconfig get wla_2nd_setup_auth`
        eval wla2_setup_rts=`dniconfig get wla_2nd_setup_rts`
        if [ -n "`dniconfig get endis_wla_2nd_wmm`" ]; then
            eval wla2_setup_wmm_onoff=\$onoff_`dniconfig get endis_wla_2nd_wmm`
        else
            wla2_setup_wmm_onoff=$onoff_1
        fi
        eval wla2_setup_hide_ssid_onoff=\$onoff_inv_`dniconfig get wla_2nd_setup_endis_setupSSIDbro`
        eval wla2_setup_wps_onoff="off"
        eval wla2_setup_dyn_bw_rts=`dniconfig get wla_2nd_setup_dyn_bw_rts`
        eval wla2_setup_rps=`dniconfig get wla_2nd_setup_rps`
        tmp_allow_see_and_access=`dniconfig get wla_2nd_setup_endis_allow_see_and_access`
        if [ "$tmp_allow_see_and_access" = "" ]; then
            wla2_setup_lan_restricted_access_onoff="on"
        else
            eval wla2_setup_lan_restricted_access_onoff=\$onoff_inv_`dniconfig get wla_2nd_setup_endis_allow_see_and_access`
        fi
        eval wla2_setup_wireless_isolation_onoff=\$onoff_inv_`dniconfig get wla_2nd_setup_endis_allow_see_and_access`
        wla2_setup_disablecoext=`dniconfig get wla_2nd_disablecoext`
        wla2_setup_rrm=`dniconfig get wla_2nd_rrm`
        wla2_setup_bridge=`dniconfig get i_wla_2nd_setup_br`
        wla2_setup_priority=`dniconfig get i_wla_2nd_setup_pri`
        [ -z "$wla2_setup_bridge" ] && wla2_setup_bridge=$lan_ifname
        get_ifname_section _ifname _section $a2_device
        wla2_setup_doth=`dniconfig get wla_2nd_setup_doth`
        wla2_setup_ifname=$_ifname
        wla2_setup_section=$_section
    fi


    # ================================= 2nd 5G END ================================

    eval generate_country_code \$country_code_`dniconfig get wl_country` country_code

    wps_device_name=`dniconfig get netbiosname`
    model_name=`dniconfig get device_name`
    model_number=`dniconfig get model_number`
    serial_number=`dniconfig get serial_number`
    wl_dtim_wo_guest=`dniconfig get wl_dtim_wo_guest`
    wl_dtim_w_guest=`dniconfig get wl_dtim_w_guest`
    wl_guest_dtim=`dniconfig get wl_guest_dtim`
    wl_dtim_wo_guest=${wl_dtim_wo_guest:-4}
    wl_dtim_w_guest=${wl_dtim_w_guest:-4}
    wl_guest_dtim=${wl_guest_dtim:-4}


    wl_dtim_wo_byod=`dniconfig get wl_dtim_wo_byod`
    wl_dtim_w_byod=`dniconfig get wl_dtim_w_byod`
    wl_byod_dtim=`dniconfig get wl_byod_dtim`
    wl_dtim_wo_byod=${wl_dtim_wo_byod:-4}
    wl_dtim_w_byod=${wl_dtim_w_byod:-4}
    wl_byod_dtim=${wl_byod_dtim:-4}

    wl_arlo_dtim=`dniconfig get wl_arlo_dtim`
    wl_arlo_dtim=${wl_arlo_dtim:-42}

    eval wig_if_onoff=\$onoff_`dniconfig get endis_wig_radio`
    if [ "$wig_exist" = "on" ]; then
        if [ "$wl_hw_btn_state" = "off" ]; then
            wig_if_onoff="off"
        fi

        [ -z "$wig_device" ] && wig_device="radio0"
        wig_hwmode=11ad
        wig_ssid=`dniconfig get wig_ssid`
        eval wig_hide_ssid_onoff=\$onoff_inv_`dniconfig get wig_endis_ssid_broadcast`
        wig_channel=`dniconfig get wig_channel`
        eval wig_sectype=\$sectype_`dniconfig get wig_sectype`
        wig_hostapd_debug_level=`dniconfig get wig_hostapd_debug_level`
        wig_wpa_supplicant_debug_level=`dniconfig get wig_wpa_supplicant_debug_level`
        wig_cca_threshold=`dniconfig get wig_cca_threshold`
    fi
fi

load_wep_config()
{
    if [ -n "$DNI_CONFIG" ]; then
        local _wl=$1
        local _trans=$2

        if [ "$wl_cb_if_onoff" = "on" -a "$wl_cb_mode" = "2.4g" ]; then
            _wl=wl_bridge
        fi

        config show | grep ${_wl}_key > /tmp/wepkey-$$

        if [ -n $_trans ]; then
            sed -i -e "s/$_wl/$_trans/g" /tmp/wepkey-$$
        fi

        sed  -i -e 's/\\"/\"/g' /tmp/wepkey-$$
        sed  -i -e 's/\\\\/\\/g' /tmp/wepkey-$$
        sed  -i -e 's/\\`/\`/g' /tmp/wepkey-$$
        sed  -i -e "s/'/'\\\''/g" /tmp/wepkey-$$

        sed -i -e "s/=/='/" /tmp/wepkey-$$
        sed -i -e "s/$/'/"  /tmp/wepkey-$$

        . /tmp/wepkey-$$
        rm /tmp/wepkey-$$
    fi
}

dni_config_get_psk_phrase()
{
    local _wl=$3
    local _sectype=$4
    local _tmp_psk
    local _tmp_enc

    if [ "$wl_cb_if_onoff" = "on" -a "$wl_cb_mode" = "2.4g" ]; then
        _wl=wl_bridge
    elif [ "$wl_cb_if_onoff" = "on" -a "$wl_cb_mode" = "5g" ]; then
        _wl=wla_bridge
    fi

    case "$_sectype" in
        wpa2*|WPA2*|*PSK2*|*psk2*)
            _tmp_psk=`dniconfig get ${_wl}_wpa2_psk`
            _tmp_enc="$_sectype+ccmp"
            ;;
        *mixed*)
            _tmp_psk=`dniconfig get ${_wl}_wpas_psk`
            _tmp_enc="$_sectype+tkip+ccmp"
            ;;
        *)
            _tmp_psk=`dniconfig get ${_wl}_wpa1_psk`
            _tmp_enc="$_sectype+tkip"
            ;;
    esac
    eval export -- "${1}=\$_tmp_psk"
    eval export -- "${2}=\$_tmp_enc"
}

dni_config_get()
{
    if [ -n "$DNI_CONFIG" ]; then
        if [ "x$1" != "x" -a "x$2" != "x" ]; then
            case "$2" in
                hw_btn_state)
                    local _qans
                    local device_exist
                    local device_num=0

                    for device_exist in "$wlg_exist" "$wla_exist" "$wla2_exist" "$wig_exist"; do
                        if [ "$device_exist" = "on" ]; then
                            device_num=$((${device_num} + 1))
                        fi
                    done

                    if [ "$device_num" -ge "2" ]; then
                        _qans=$wl_hw_btn_state
                    elif [ "$wig_exist" = "on" ]; then
                        _qans=$wig_if_onoff
                    elif [ "$wlg_exist" = "on" ]; then
                        _qans=$wlg_if_onoff
                    else
                        _qans=$wla2_if_onoff
                    fi
                    eval export -- "${1}=\${_qans}"
                    ;;
                wds_endis_mac_client*)
                    local _qans
                    eval _qans=\$onoff_inv_`dniconfig get $2`
                    eval export -- "${1}=\${_qans}"
                    ;;
                radio_num)
                    local _qans
                    if [ `dniconfig get wl_hw_btn_state` = "off" ]; then
                        _qans=0
                    else
                        _qans=$((`dniconfig get endis_wl_radio`+`dniconfig get endis_wla_2nd_radio`))
                    fi
                    eval export -- "${1}=\${_qans}"
                    ;;
                security_type)
                    local _qans
                    if [ `dniconfig get wl_hw_btn_state` = "off" ]; then
                        g_radio=0
                        a_radio=0
                    else
                        g_radio=`dniconfig get endis_wl_radio`
                        a_radio=`dniconfig get endis_wla_2nd_radio`
                    fi
                    g_type=`dniconfig get wl_sectype`
                    a_type=`dniconfig get wla_sectype`
                    if [ "$g_radio" = "1" -a "$a_radio" = "1" ]; then
                        if [ "$g_type" -gt "1" ]; then
                            _qans=$g_type
                        else
                            _qans=$a_type
                        fi
                    elif [ "$g_radio" = "1" -a "$a_radio" = "0" ]; then
                        _qans=$g_type
                    else
                        _qans=$a_type
                    fi
                    eval export -- "${1}=\${_qans}"
                    ;;
                radio_type)
                    local _qans
                    if [ `dniconfig get wl_hw_btn_state` = "off" ]; then
                        g_radio=0
                        a_radio=0
                    else
                        g_radio=`dniconfig get endis_wl_radio`
                        a_radio=`dniconfig get endis_wla_2nd_radio`
                    fi
                    if [ "$g_radio" = "1" -a "$a_radio" = "1" ]; then
                        _qans="dual"
                    elif [ "$g_radio" = "1" -a "$a_radio" = "0" ]; then
                        _qans="11g"
                    elif [ "$g_radio" = "0" -a "$a_radio" = "1" ]; then
                        _qans="11a"
                    else
                        _qans="none"
                    fi
                    eval export -- "${1}=\${_qans}"
                    ;;
                gui_radio_state)
                    local _qans
                    if [ "$wlg_exist" = "on" -a "$wla_exist" = "on" ]; then
                        if [ $((`dniconfig get endis_wl_radio`+`dniconfig get endis_wla_2nd_radio`)) == "2" ]; then
                            _qans="on"
                        elif [ `dniconfig get endis_wl_radio` = "1" ]; then
                            _qans="g_on"
                        elif [ `dniconfig get endis_wla_2nd_radio` = "1" ]; then
                            _qans="a_on"
                        else
                            _qans="off"
                        fi
                    elif [ "$wlg_exist" = "on" ]; then
                        _qans=\$onoff_`dniconfig get endis_wl_radio`
                    else
                        _qans=\$onoff_`dniconfig get endis_wla_2nd_radio`
                    fi
                    eval export -- "${1}=\${_qans}"
                    ;;
                wig_gui_radio_state)
                    local _qans
                    if [ "$wig_exist" = "on" ]; then
                        _qans=\$onoff_`dniconfig get endis_wig_radio`
                    fi
                    eval export -- "${1}=\${_qans}"
                    ;;

                *)
                    local _qans=`dniconfig get $2`
                    eval export -- "${1}=\${_qans}"
                    ;;
            esac
        fi
    fi
}

dni_config_set()
{
    if [ -n "$DNI_CONFIG" ]; then
        if [ "x$1" != "x" -a "x$2" != "x" ]; then
            case "$1" in
                hw_btn_state)
                    local device_exist
                    local device_num=0

                    for device_exist in "$wlg_exist" "$wla_exist" "$wig_exist"; do
                        if [ "$device_exist" = "on" ]; then
                            device_num=$((${device_num} + 1))
                        fi
                    done

                    if [ "$device_num" -ge "2" ]; then
                        eval `dniconfig set wl_hw_btn_state=$2`
                        wl_hw_btn_state="$2"
                    elif [ "$wig_exist" = "on" ]; then
                        if [ "$2" = "on" ]; then
                            dniconfig set endis_wig_radio=1
                            wig_if_onoff="on"
                        else
                            dniconfig set endis_wig_radio=0
                            wig_if_onoff="off"
                        fi
                    elif [ "$wlg_exist" = "on" ]; then
                        if [ "$2" = "on" ]; then
                            dniconfig set endis_wl_radio=1
                            endis_wl_radio="on"
                        else
                            dniconfig set endis_wl_radio=0
                            endis_wl_radio="off"
                            fi
                    else
                        if [ "$2" = "on" ]; then
                            dniconfig set endis_wla_2nd_radio=1
                            endis_wla_2nd_radio="on"
                        else
                            dniconfig set endis_wla_2nd_radio=0
                            endis_wla_2nd_radio="off"
                        fi
                    fi
                    ;;
                sched_status)
                    if [ "$2" = "11g" ]; then
                        eval `dniconfig set wlg_onoff_sched=$3`
                    elif [ "$2" = "11a" ]; then
                        eval `dniconfig set wla_onoff_sched=$3`
                    elif [ "$2" = "11ad" ]; then
                        eval `dniconfig set wig_onoff_sched=$3`
                    fi
                    ;;
                wl_onoff)
                    if [ "$2" = "11g" ]; then
                        eval `dniconfig set endis_wl_radio=$3`
                    elif [ "$2" = "11a" ]; then
                        eval `dniconfig set endis_wla_2nd_radio=$3`
                    elif [ "$2" = "11ad" ]; then
                        eval `dniconfig set endis_wig_radio=$3`
                    fi
                    ;;
                *)
                    eval `dniconfig set $1=$2`
                    ;;
            esac
        fi
    fi
}

load_wpa_config()
{
    if [ -n "$DNI_CONFIG" ]; then
        local _wl=$1

        wl_sectype=`dniconfig get ${_wl}_wpae_mode`
        wl_auth_sv_ip=`dniconfig get ${_wl}_radiusSerIp`
        wl_auth_sv_port=`dniconfig get ${_wl}_radiusPort`
        wl_auth_sv_secret=`dniconfig get ${_wl}_radiusSecret`
        case "$wl_sectype" in
            *TKIPAES)
                _tmp_wpa="wpa_mixed"
                ;;
            *AES)
                _tmp_wpa="wpa2"
                ;;
            *)
                _tmp_wpa="wpa"
                        ;;
        esac
    fi
}

dni_config_commit()
{
    dniconfig commit
}

#
# Toggle "hw_btn_state" between "on" and "off".
#
# Following 3 functions in this file are used:
#    dni_config_get
#    dni_config_set
#    dni_config_commit
#
dni_toggle_hw_btn_state()
{
    local old_state
    local new_state

    dni_config_get old_state hw_btn_state
    if [ "$old_state" = "on" ]; then
        new_state="off"
    else
        new_state="on"
    fi
    dni_config_set hw_btn_state "$new_state"

    dni_config_commit
}
